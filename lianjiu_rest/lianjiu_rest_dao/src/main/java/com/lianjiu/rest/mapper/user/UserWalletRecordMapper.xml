<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lianjiu.rest.mapper.user.UserWalletRecordMapper">
	<resultMap id="userWalletRecordResultMap" type="com.lianjiu.model.UserWalletRecord">
		<id column="record_id" property="recordId" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="record_name" property="recordName" jdbcType="VARCHAR" />
		<result column="record_price" property="recordPrice" jdbcType="VARCHAR" />
		<result column="relative_id" property="relativeId" jdbcType="VARCHAR" />
		<result column="record_status" property="recordStatus"
			jdbcType="VARCHAR" />
		<result column="is_income" property="isIncome" jdbcType="TINYINT" />
		<result column="msg" property="msg" jdbcType="VARCHAR" />
		<result column="record_created" property="recordCreated"
			jdbcType="TIMESTAMP" />
		<result column="record_updated" property="recordUpdated"
			jdbcType="TIMESTAMP" />
	</resultMap>
	<select id="selectByPrimaryKey" resultMap="userWalletRecordResultMap"
		parameterType="java.lang.String">select * from user_wallet_record where record_id =
		#{recordId,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from
		user_wallet_record
		where record_id = #{recordId,jdbcType=VARCHAR}
	</delete>
	<insert id="insertSelective" parameterType="com.lianjiu.model.UserWalletRecord">
		insert into user_wallet_record
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="recordId != null">
				record_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="recordName != null">
				record_name,
			</if>
			<if test="recordPrice != null">
				record_price,
			</if>
			<if test="relativeId != null">
				relative_id,
			</if>
			<if test="recordStatus != null">
				record_status,
			</if>
			<if test="isIncome != null">
				is_income,
			</if>
			<if test="msg != null">
				msg,
			</if>
			<if test="recordCreated != null">
				record_created,
			</if>
			<if test="recordUpdated != null">
				record_updated,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="recordId != null">
				#{recordId,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="recordName != null">
				#{recordName,jdbcType=VARCHAR},
			</if>
			<if test="recordPrice != null">
				#{recordPrice,jdbcType=VARCHAR},
			</if>
			<if test="relativeId != null">
				#{relativeId,jdbcType=VARCHAR},
			</if>
			<if test="recordStatus != null">
				#{recordStatus,jdbcType=VARCHAR},
			</if>
			<if test="isIncome != null">
				#{isIncome,jdbcType=TINYINT},
			</if>
			<if test="msg != null">
				#{msg,jdbcType=VARCHAR},
			</if>
			<if test="recordCreated != null">
				#{recordCreated,jdbcType=TIMESTAMP},
			</if>
			<if test="recordUpdated != null">
				#{recordUpdated,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.lianjiu.model.UserWalletRecord">
		update user_wallet_record
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="recordName != null">
				record_name = #{recordName,jdbcType=VARCHAR},
			</if>
			<if test="recordPrice != null">
				record_price = #{recordPrice,jdbcType=VARCHAR},
			</if>
			<if test="relativeId != null">
				relative_id = #{relativeId,jdbcType=VARCHAR},
			</if>
			<if test="recordStatus != null">
				record_status = #{recordStatus,jdbcType=VARCHAR},
			</if>
			<if test="isIncome != null">
				is_income = #{isIncome,jdbcType=TINYINT},
			</if>
			<if test="msg != null">
				msg = #{msg,jdbcType=VARCHAR},
			</if>
			<if test="recordCreated != null">
				record_created = #{recordCreated,jdbcType=TIMESTAMP},
			</if>
			<if test="recordUpdated != null">
				record_updated = #{recordUpdated,jdbcType=TIMESTAMP},
			</if>
		</set>
		where record_id = #{recordId,jdbcType=VARCHAR}
	</update>
	<select id="selectRecordByUserId" resultMap="userWalletRecordResultMap"
		parameterType="java.lang.String">
		SELECT
		record_name,
		record_price,
		is_income,
		record_status,
		record_updated
		FROM
		user_wallet_record
		WHERE
		user_id =
		#{userId,jdbcType=VARCHAR}
		and is_income != 3
		ORDER BY record_updated
		DESC
	</select>
	<select id="selectByUserId" resultMap="userWalletRecordResultMap"
		parameterType="java.lang.String">
		select record_name,record_price,is_income,record_created
		from user_wallet_record where user_id =
		#{userId,jdbcType=VARCHAR}
		order by record_created desc
	</select>
	<!--查加盟商已结算金额 -->
	<select id="getAmountByUserId" resultType="java.lang.String"
		parameterType="java.lang.String">
		SELECT
		Round(SUM(record_price),2)
		FROM
		`user_wallet_record`
		WHERE
		user_id = #{userId};
	</select>
	<!-- 查询wallet信息 -->
	<select id="selectWalletMoneyidByOrderid" resultMap="userWalletRecordResultMap"
		parameterType="java.lang.String">
		select * from user_wallet_record where relative_id =
		#{0} and is_income = 4
	</select>
	<!-- 查询所有流水单记录 （需手动提现的记录） -->
	<select id="selectAll" resultMap="userWalletRecordResultMap">
		select * from
		user_wallet_record where is_income in ('0','1','2','9') and
		record_status in ('0','1','2') order by record_created desc
	</select>
	<!-- 提现已成功的记录 -->
	<select id="selectAlls" resultMap="userWalletRecordResultMap" >
		select * from
		user_wallet_record where is_income in ('0','1','2','9') and
		record_status not in ('0','1','2') order by record_created desc
	</select>
	
	<!-- 模糊查询 -->
	<select id="vagueQuery" resultMap="userWalletRecordResultMap">
		select * from user_wallet_record
		<where>
			<if
				test="userWalletRecord.userId != null and userWalletRecord.userId != ''">
				and user_id LIKE CONCAT('%',#{userWalletRecord.userId},'%')
			</if>
			<if
				test="userWalletRecord.recordName != null and userWalletRecord.recordName != ''">
				and record_name LIKE
				CONCAT('%',#{userWalletRecord.recordName},'%')
			</if>
			<if
				test="userWalletRecord.recordStatus != null and userWalletRecord.recordStatus != ''">
				and record_status = #{userWalletRecord.recordStatus}
			</if>
			<if test="userWalletRecord.msg != null and userWalletRecord.msg != ''">
				<if
					test="userWalletRecord.msg == '0'.toString() or userWalletRecord.msg == '1'.toString()">
					and (is_income = 0 or is_income=1)
				</if>
				<if
					test="userWalletRecord.msg == '2'.toString() or userWalletRecord.msg == '9'.toString()">
					and (is_income = 2 or is_income=9)
				</if>
			</if>
			<if
				test="cratedStart != null and cratedStart != '' and cratedOver != null and cratedOver != '' ">
				and record_created between #{cratedStart} and #{cratedOver}
			</if>
			and is_income in ('0','1','2','9') and record_status in ('0','1','2')
		</where>
		ORDER BY record_created DESC
	</select>
	
		<!-- 模糊查询 -->
	<select id="vagueQuerys" resultMap="userWalletRecordResultMap">
		select * from user_wallet_record
		<where>
			<if
				test="userWalletRecord.recordName != null and userWalletRecord.recordName != ''">
				and record_name LIKE
				CONCAT('%',#{userWalletRecord.recordName},'%')
			</if>
			<if
				test="cratedStart != null and cratedStart != '' and cratedOver != null and cratedOver != '' ">
				and record_created between #{cratedStart} and #{cratedOver}
			</if>
			and is_income in ('0','1','2','9') and
			record_status not in ('0','1','2')
		</where>
		ORDER BY record_created DESC
	</select>

	<select id="getByReferrer" resultMap="userWalletRecordResultMap">
		SELECT
		uw.user_id,
		uw.record_price,
		uw.relative_id,
		uw.record_created
		FROM
		user_wallet_record uw
		LEFT JOIN `user` u ON uw.user_id = u.user_id
		<where>
			udetails_referrer !='aaaaaa'
			and uw.is_income = #{isIncome}
			<if test="referrer !=null and referrer != ''">
				and u.udetails_referrer = #{referrer}
			</if>
			<if
				test="startTime != null and startTime != '' and endTime != null and endTime != ''">
				and uw.record_created BETWEEN #{startTime} AND #{endTime}
			</if>
		</where>
		order by uw.record_created desc

	</select>
</mapper>